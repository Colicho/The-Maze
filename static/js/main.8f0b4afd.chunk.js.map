{"version":3,"sources":["logo.svg","components/header.js","components/mainComp/theGame.js","components/main.js","components/footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Vertex","node","this","connections","distance","visited","previousNode","weight","neighbor","push","previous","Graph","vertexDict","vertices","newVertex","frm","to","addVertex","addConnection","Maze","width","height","matrix","unvisitedNodes","row","column","rnd","Math","random","includes","item","i","length","x","square","document","createElement","getElementById","appendChild","bestRoute","getMaze","g","index","position","rounding","floor","newPosition","validInput","addEdge","djikstra","graph","startNode","setDistance","vertex","setPreviousNode","queue","setVisited","shift","distanceboard","validMoves","userMoves","userInput","getValidMoves","pop","Begin","myNode","firstChild","removeChild","getGame","Main","id","onClick","Footer","App","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.8f0b4afd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\"\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className=\"he\">\r\n            <h2>Test</h2>   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\nclass Vertex{\r\n    constructor(node){\r\n        this.node = node;\r\n        this.connections = [];\r\n        this.distance = 9007199254740992\r\n        this.visited = false;\r\n        this.previousNode = null;\r\n        this.weight = 1\r\n    }\r\n    addConnection(neighbor){\r\n        this.connections.push(neighbor)       \r\n    }\r\n    setDistance(distance){\r\n        this.distance = distance;\r\n    }\r\n    setPreviousNode(previous){\r\n        this.previousNode = previous;\r\n    }\r\n    setVisited(){\r\n        this.visited = true;\r\n    }\r\n}\r\n\r\nclass Graph{\r\n    constructor(){\r\n        this.vertexDict = {}\r\n        this.vertices = 0\r\n    }\r\n    addVertex(node){\r\n        //ÄNDRA PÅ DICTIORNARY, INTE SAMMA SOM PYTHON\r\n        this.vertices++\r\n        let newVertex = new Vertex(node)\r\n        this.vertexDict[node] = newVertex\r\n\r\n    }\r\n    addEdge(frm, to){\r\n        if (!(frm in this.vertexDict)){\r\n            this.addVertex(frm)\r\n        }\r\n        if (!(to in this.vertexDict)){\r\n            this.addVertex(to)\r\n        }\r\n        this.vertexDict[frm].addConnection(this.vertexDict[to])\r\n        this.vertexDict[to].addConnection(this.vertexDict[frm])\r\n    }\r\n}\r\n\r\nclass Maze{\r\n    constructor(width, height){\r\n        this.matrix = []\r\n        this.width = width + 2\r\n        this.height = height + 2\r\n        this.unvisitedNodes = []\r\n        //Mapping the maze\r\n        for (let row = 0; row < this.height; row++){\r\n            this.matrix.push([])\r\n            for (let column = 0; column < this.width; column++){\r\n                let rnd = Math.random()\r\n                     \r\n                if ((row === 0) || (row === this.height - 1) || (column === 0) || (column === this.width - 1)){\r\n                    this.matrix[row].push('1')\r\n                }\r\n                else if (rnd >= 0.5){\r\n                    this.matrix[row].push('2')\r\n                }\r\n                else{\r\n                    this.matrix[row].push('O')\r\n                    if (row !== 0 && row !== this.height-1 && column !== 0 && column !== this.width -1){\r\n                        this.unvisitedNodes.push(row*width - width + column)\r\n                    }\r\n                }\r\n            }\r\n        }   \r\n        if (!(this.unvisitedNodes.includes(1))){\r\n            this.unvisitedNodes.push(1)\r\n        }  \r\n        if (!(this.unvisitedNodes.includes(width*height))){\r\n            this.unvisitedNodes.push(width*height)\r\n        }\r\n        this.matrix[1][1] = \"#\"\r\n        this.matrix[this.height-2][this.width-2] = \"E\"\r\n    }\r\n\r\n    getMaze(item){\r\n        //document.getElementById('board').innerHTML = this.matrix\r\n        for (let i = 0; i < item.length; i++){\r\n            for (let x = 0; x < item[i].length; x++){\r\n                let square = document.createElement('div');\r\n                switch(item[i][x]){\r\n                    case '1':\r\n                        square.className = 'squareB';\r\n                        break;\r\n                    case '2':\r\n                        square.className = 'squareW';\r\n                        break;\r\n                    case 'O':\r\n                        square.className = 'squareG';\r\n                        break;\r\n                    case '#':\r\n                        square.className = 'squareP';\r\n                        break;\r\n                    case 'E':\r\n                        square.className = 'squareE';\r\n                        break;\r\n                    case '@':\r\n                        square.className = 'squareO';\r\n                        break;\r\n                    default:\r\n                        break\r\n                }\r\n                document.getElementById('board').appendChild(square)\r\n            }\r\n        }\r\n    }\r\n    getGame(){\r\n        let fastestRoute = this.bestRoute()\r\n        if (fastestRoute === false){\r\n            return false\r\n        }\r\n        this.getMaze(this.matrix)\r\n        /*this.position = [1,1]\r\n        this.userMoves = []\r\n        //The game will last until the player reaches the goal\r\n        while(this.position != [this.height-2, this.width-2]){\r\n            this.matrix[this.position[0]][this.position[1]] = '@'\r\n            this.position = this.validInput(this.position, this.userMoves)\r\n            this.matrix[this.position[0]][this.position[1]] = '#'\r\n            this.matrix.forEach(this.getMaze)\r\n        }\r\n        document.write(\"Good job! You cleared the maze in \" + this.userMoves.lenth.toString(10) + \" moves!\")\r\n        document.write(\"The least amount of moves required for traversing through the maze is \" + fastestRoute.toString(10) + \"!\")\r\n        return true*/\r\n        \r\n    }\r\n    bestRoute(){\r\n        let g = new Graph()\r\n        //Adding all of the vertices\r\n        for (let index = 0; index < this.unvisitedNodes.length; index++) {\r\n            g.addVertex(this.unvisitedNodes[index])         \r\n        }\r\n        var position = []\r\n        //Adding all of the possible routes/edges\r\n        for (var i = 0; i < this.unvisitedNodes.length; i++){\r\n            this.index = -1\r\n            var rounding = Math.floor(this.unvisitedNodes[i] / (this.width - 2))\r\n            if (this.unvisitedNodes[i] % (this.width - 2) === 0){\r\n                position = [rounding, this.unvisitedNodes[i] - (this.width - 2)*(rounding-1)]\r\n            }\r\n            else{\r\n                position = [rounding + 1, this.unvisitedNodes[i] - rounding*(this.width - 2)]\r\n            }\r\n            while(true){\r\n                var newPosition = this.validInput(position, null, \"bestRoute\")\r\n                if (!newPosition){\r\n                    break\r\n                }\r\n                g.addEdge(this.width*(position[0]-1) + position[1] - 2*position[0] + 2, this.width*(newPosition[0]-1) + newPosition[1] - 2*newPosition[0] + 2)\r\n            }\r\n        }\r\n        return this.djikstra(g, g.vertexDict[1])\r\n    }\r\n    djikstra(graph, startNode){\r\n        startNode.setDistance(0)\r\n        var vertex = startNode\r\n        vertex.setPreviousNode(vertex)\r\n        var queue = []\r\n        queue.push(vertex)\r\n        //Algorithm for finding the shortest path from a start node\r\n        while (graph.vertexDict[(this.width-2)*(this.height-2)].distance === 9007199254740992){\r\n            vertex = queue[0]\r\n            for(var i = 0; i < vertex.connections.length; i++){\r\n                if (vertex.connections[i].previousNode == null || vertex.distance + vertex.connections[i].connections[vertex] < vertex.connections[i].distance){\r\n                    queue.push(vertex.connections[i])\r\n                    vertex.connections[i].setPreviousNode(vertex)\r\n                    vertex.connections[i].setDistance(vertex.distance + vertex.connections[i].connections[vertex])\r\n                }\r\n            }\r\n            vertex.setVisited()\r\n            queue.shift()\r\n\r\n            if (queue.length === 0){\r\n                break\r\n            }\r\n        }\r\n        if (graph.vertexDict[(this.width-2)*(this.height-2)].distance === 9007199254740992){\r\n            //document.write(\"Unfortunately, there is no solution to this maze :(\")\r\n            return false\r\n        }\r\n        else{\r\n            return graph.vertexDict[(this.width-2)*(this.height-2)].distanceboard\r\n        }\r\n    }\r\n    getValidMoves(){\r\n        var validMoves = [\"w\", \"a\", \"s\", \"d\", \"wa\", \"wd\", \"as\", \"sd\"]\r\n        this.index++\r\n        if (this.index === validMoves.length){\r\n            return false\r\n        }\r\n        else{\r\n            return validMoves[this.index]\r\n        }\r\n    }\r\n    validInput(position, userMoves = null, bestRoute = null, userInput = null){\r\n        var validMoves = [\"w\", \"a\", \"s\", \"d\", \"wa\", \"aw\", \"wd\", \"dw\", \"as\", \"sa\", \"sd\", \"ds\", \"b\"]\r\n        while(true){\r\n            if (bestRoute != null){\r\n                userInput = this.getValidMoves()\r\n                if (userInput === false){\r\n                    return false\r\n                }\r\n            }\r\n            //Check if the user move is valid or not\r\n            if (validMoves.includes(userInput)){             \r\n                if (userInput === \"w\"){\r\n                    if (position[0] !== 1 && this.matrix[position[0]-1][position[1]] !== '2'){\r\n                        if (userMoves != null){\r\n                            userMoves.push([position[0]-1, position[1]])\r\n                        }\r\n                        return [position[0]-1, position[1]]\r\n                    }\r\n                }\r\n                else if (userInput === \"a\"){\r\n                    if (position[1] !== 1 && this.matrix[position[0]][position[1]-1] !== '2'){\r\n                        if (userMoves != null){\r\n                            userMoves.push([position[0], position[1]-1])\r\n                        }\r\n                        return [position[0], position[1]-1]\r\n                    }\r\n                }\r\n                else if (userInput === \"s\"){\r\n                    if (position[0] !== this.height-2 && this.matrix[position[0]+1][position[1]] !== '2'){\r\n                        if (userMoves != null){\r\n                            userMoves.push([position[0]+1, position[1]])\r\n                        }\r\n                        return [position[0]+1, position[1]]\r\n                    }\r\n                }\r\n                else if (userInput === \"d\"){\r\n                    if (position[1] !== this.width-2 && this.matrix[position[0]][position[1]+1] !== '2'){\r\n                        if (userMoves != null){\r\n                            userMoves.push([position[0], position[1]+1])\r\n                        }\r\n                        return [position[0], position[1]+1]\r\n                    }\r\n                }\r\n                else if (userInput === \"wd\" || userInput === \"dw\"){\r\n                    if (position[0] !== 1 && position[1] !== this.width-2 && this.matrix[position[0]-1][position[1]+1] !== '2'){\r\n                        if (userMoves != null){\r\n                            userMoves.push([position[0]-1, position[1]+1])\r\n                        }\r\n                        return [position[0]-1, position[1]+1]\r\n                    }\r\n                }\r\n                else if (userInput === \"wa\" || userInput === \"aw\"){\r\n                    if (position[0] !== 1 && position[1] !== 1 && this.matrix[position[0]-1][position[1]-1] !== '2'){\r\n                        if (userMoves != null){\r\n                            userMoves.push([position[0]-1, position[1]-1])\r\n                        }\r\n                        return [position[0]-1, position[1]-1]\r\n                    }\r\n                }\r\n                else if (userInput === \"as\" || userInput === \"sa\"){\r\n                    if (position[1] !== 1 && position[0] !== this.height-2 && this.matrix[position[0]+1][position[1]-1] !== '2'){\r\n                        if (userMoves != null){\r\n                            userMoves.push([position[0]+1, position[1]-1])\r\n                        }\r\n                        return [position[0]+1, position[1]-1]\r\n                    }\r\n                }\r\n                else if (userInput === \"sd\" || userInput === \"ds\"){\r\n                    if (position[0] !== this.height-2 && position[1] !== this.width-2 && this.matrix[position[0]+1][position[1]+1] !== '2'){\r\n                        if (userMoves != null){\r\n                            userMoves.push([position[0]+1, position[1]+1])\r\n                        }\r\n                        return [position[0]+1, position[1]+1]\r\n                    }\r\n                }\r\n                else if (userInput === \"b\"){\r\n                    if (userMoves){\r\n                        this.matrix[position[0]][position[1]] = 0\r\n                        userMoves.pop()\r\n                        if (userMoves){\r\n                            return userMoves[-1]\r\n                        }\r\n                        else{\r\n                            return [1,1]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction Begin(){\r\n    const myNode = document.getElementById(\"board\");\r\n    while (myNode.firstChild) {\r\n        myNode.removeChild(myNode.firstChild);\r\n    }\r\n    let game = new Maze(8,8)\r\n    if(game.getGame() === false){\r\n        return Begin()\r\n    }\r\n    \r\n    //document.getElementById('board').appendChild(document.createTextNode(game.matrix)) \r\n}\r\n\r\nexport default Begin","import React from \"react\"\r\nimport Begin from \"./mainComp/theGame\"\r\n\r\n\r\nfunction Main(){\r\n    return(\r\n        <div className=\"game\">\r\n            <div id=\"board\"></div>\r\n            <button onClick={Begin}>Begin</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Main","import React from \"react\"\r\n\r\nfunction Footer(){\r\n    return(\r\n        <div>\r\n            test\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\"\nimport Header from \"./components/header\"\nimport Main from \"./components/main\"\nimport Footer from \"./components/footer\"\n\nclass App extends React.Component{\n  constructor(){\n    super()\n\n  }\n  render(){\n    return(\n      <div>\n        <noscript>Your browser doesn't support or has disabled javascripts</noscript>\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}